package com.csot.recruit.service.impl.flow.recruitdemand;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.csot.recruit.dao.original.flow.recruitdemand.RecruitDemandChangeMapper;
import com.csot.recruit.dao.original.flow.recruitdemand.RecruitDemandLogMapper;
import com.csot.recruit.dao.original.flow.recruitdemand.RecruitDemandMapper;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemand;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandChange;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandChangeColumns;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandChangeCriteria;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandLog;
import com.csot.recruit.service.flow.recruitdemand.RecruitDemandChangeService;

import javax.annotation.Resource;

import org.amberframework.core.mybatis.pojo.Page;
import org.amberframework.web.miniui.pojo.MiniGridPageSort;
import org.amberframework.web.miniui.pojo.MiniRtn2Grid;
import org.amberframework.web.system.auth.model.original.user.SysUser;
import org.amberframework.web.system.model.BaseUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service("recruitDemandChangeService")
public class RecruitDemandChangeServiceImpl implements RecruitDemandChangeService {
  private static final Logger logger = LoggerFactory
      .getLogger(RecruitDemandChangeServiceImpl.class);

  @Resource
  private RecruitDemandChangeMapper recruitDemandChangeMapper;
  @Resource
  private RecruitDemandLogMapper recruitDemandLogMapper;
  @Resource
  private RecruitDemandMapper recruitDemandMapper;

  @Override
  public MiniRtn2Grid<RecruitDemandChange> getGrid(MiniGridPageSort pageSort, String searchKey) {
    MiniRtn2Grid<RecruitDemandChange> grid = new MiniRtn2Grid<RecruitDemandChange>();
    RecruitDemandChangeCriteria criteria = new RecruitDemandChangeCriteria();
    // 查询条件
    if (StringUtils.hasText(searchKey)) {
      criteria.createCriteria().andIdEqualTo(searchKey);
    }
    // 分页和排序
    if (pageSort.isShowPager()) {
      Page page = Page.newInstanceWithPageIndex(pageSort.getPageIndex(), pageSort.getPageSize());
      criteria.setPage(page);
    }
    String sortColumn = RecruitDemandChangeColumns.getColumn(pageSort.getSortField());
    if (StringUtils.hasText(sortColumn)) {
      StringBuilder sortStrBldr =
          new StringBuilder(sortColumn).append(" ").append(pageSort.getSortOrder());
      criteria.setOrderByClause(sortStrBldr.toString());
    }
    grid.setData(recruitDemandChangeMapper.selectByExample(criteria));
    grid.setTotal(recruitDemandChangeMapper.countByExample(criteria));
    return grid;
  }

  @Override
  public RecruitDemandChange getByPrimaryKey(String primaryKey) {
    return recruitDemandChangeMapper.selectByPrimaryKey(primaryKey);
  }

  @Override
  public void create(RecruitDemandChange recruitDemandChange) {
    recruitDemandChangeMapper.insert(recruitDemandChange);
  }

  @Override
  public void updateSelective(RecruitDemandChange recruitDemandChange) {
    recruitDemandChangeMapper.updateByPrimaryKeySelective(recruitDemandChange);
  }

  @Override
  public void remove(String primaryKey) {
    recruitDemandChangeMapper.deleteByPrimaryKey(primaryKey);
  }


  @Override
  /**
   * 获取未完成的字段修改申请
   */
  public List<RecruitDemandChange> getInfoWithNotDeal(String id, String type) {
    RecruitDemandChangeCriteria criteria = new RecruitDemandChangeCriteria();
    criteria.or().andDemandIdEqualTo(id).andIsDealEqualTo(RecruitDemandChange.isDeal.NO.valueStr())
        .andTypeEqualTo(type);
    return recruitDemandChangeMapper.selectByExample(criteria);
  }

  @Override
  /**
   * 修改审核记录详情 生成修改记录
   * 
   * @param recruitDemandChange  
   * @param baseUser 默认审批人
   */
  public void updateSelectiveSelf(RecruitDemandChange recruitDemandChange, BaseUser baseUser,
      RecruitDemand recruitDemand) {
    // 判断是否同意修改同意进行数据修改和日志记录
    if (RecruitDemandChange.isAgerr.YES.valueStr().equals(recruitDemandChange.getIsAgerr())) {
      RecruitDemandLog recruitDemandLog = new RecruitDemandLog();
      recruitDemandLog.setDemandId(recruitDemandChange.getDemandId());
      recruitDemandLog.setUpdateDate(new Date());
      recruitDemandLog.setModifiedId(baseUser.getId());
      recruitDemandLog.setModifiedName(baseUser.getAccount());
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemandChange.getNewStr());
      recruitDemandLog.setOldStr(recruitDemandChange.getOldStr());
      // 修改招聘需求对应字段
      if (RecruitDemandChange.type.APPLYNUM.valueStr().equals(recruitDemandChange.getType())) {
        // 修改申请人数
        recruitDemandLog.setUpdateField("申请人数");
        recruitDemand.setApplyPersonNumber(Integer.valueOf(recruitDemandChange
            .getNewStr()));
      }
      if (RecruitDemandChange.type.WANTCOMEDATE.valueStr().equals(recruitDemandChange.getType())) {
        // 修改期望到岗时间
        recruitDemandLog.setUpdateField("期望到岗时间");
        recruitDemand.setWantComeDate(recruitDemandChange.getNewStr());
      }
      recruitDemand.setUpdateDate(new Date());
      recruitDemand.setModifiedId(baseUser.getId());
      // 修改招聘需求的字段
      recruitDemandMapper.updateByPrimaryKeySelective(recruitDemand);
      // 生成修改记录
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    // 修改操作记录
    recruitDemandChange.setUpdateDate(new Date());
    recruitDemandChange.setIsDeal(RecruitDemandChange.isDeal.YES.valueStr()); // 设置处理完成
    recruitDemandChangeMapper.updateByPrimaryKeySelective(recruitDemandChange);

  }
}
