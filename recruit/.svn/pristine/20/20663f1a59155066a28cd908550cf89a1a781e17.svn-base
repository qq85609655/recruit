package com.csot.recruit.service.impl.flow.recruitdemand;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.csot.recruit.dao.original.flow.recruitdemand.RecruitDemandLogMapper;
import com.csot.recruit.dao.original.flow.recruitdemand.RecruitDemandMapper;
import com.csot.recruit.model.datadict.DatadictGroup;
import com.csot.recruit.model.original.flow.recruitdemand.DemandSelfState;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemand;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandColumns;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandCriteria;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemandLog;
import com.csot.recruit.service.flow.recruitdemand.RecruitDemandService;

import javax.annotation.Resource;

import org.amberframework.core.mybatis.pojo.Page;
import org.amberframework.web.miniui.pojo.MiniGridPageSort;
import org.amberframework.web.miniui.pojo.MiniRtn2Grid;
import org.amberframework.web.system.auth.model.original.user.SysUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service("recruitDemandService")
public class RecruitDemandServiceImpl implements RecruitDemandService {
  private static final Logger logger = LoggerFactory.getLogger(RecruitDemandServiceImpl.class);

  @Resource
  private RecruitDemandMapper recruitDemandMapper;
  @Resource
  private RecruitDemandLogMapper recruitDemandLogMapper;


  @Override
  public MiniRtn2Grid<RecruitDemand> getGrid(MiniGridPageSort pageSort,
      Map<String, String> searchMap) {
    MiniRtn2Grid<RecruitDemand> grid = new MiniRtn2Grid<RecruitDemand>();
    RecruitDemandCriteria criteria = new RecruitDemandCriteria();
    // 查询条件
    String stateSelf = searchMap.get("stateSelf");
    String searchKey = searchMap.get("searchKey");
    if (StringUtils.hasText(searchKey)) {
      criteria.createCriteria().andIdEqualTo(searchKey);
    }
    if (StringUtils.hasText(stateSelf)) {
      if (DemandSelfState.DRAFT.value().equals(stateSelf)) { // 草稿状态的需求
        criteria.createCriteria().andFlowStateEqualTo(
            RecruitDemand.flowState.UNCOMMITTED.valueStr());
      }
      if (DemandSelfState.AUDIT.value().equals(stateSelf)) { // 审批中状态的需求
        criteria.createCriteria().andFlowStateEqualTo(RecruitDemand.flowState.AUDIT.valueStr());
      }
      if (DemandSelfState.APPROVE.value().equals(stateSelf)) { // 审批完成状态的需求
        criteria.createCriteria().andFlowStateEqualTo(RecruitDemand.flowState.APPROVE.valueStr());
      }
      if (DemandSelfState.NOTFINISHED.value().equals(stateSelf)) { // 未完成状态的需求
        criteria.createCriteria().andIsFinishEqualTo(RecruitDemand.isFinish.NOTFINISHED.valueStr());
      }
      if (DemandSelfState.FINISHED.value().equals(stateSelf)) { // 已完成状态的需求
        criteria.createCriteria().andIsFinishEqualTo(RecruitDemand.isFinish.FINISHED.valueStr());
      }
    }
    // 分页和排序
    if (pageSort.isShowPager()) {
      Page page = Page.newInstanceWithPageIndex(pageSort.getPageIndex(), pageSort.getPageSize());
      criteria.setPage(page);
    }
    String sortColumn = RecruitDemandColumns.getColumn(pageSort.getSortField());
    if (StringUtils.hasText(sortColumn)) {
      StringBuilder sortStrBldr =
          new StringBuilder(sortColumn).append(" ").append(pageSort.getSortOrder());
      criteria.setOrderByClause(sortStrBldr.toString());
    }
    List<RecruitDemand> recruitdemands = recruitDemandMapper.selectByExample(criteria);
    for (RecruitDemand recruitDemand : recruitdemands) {
      recruitDemand.setRankName(DatadictGroup.getTypeNameByTypeId(recruitDemand.getRankId()));
    }
    grid.setData(recruitdemands);
    grid.setTotal(recruitDemandMapper.countByExample(criteria));
    return grid;
  }

  @Override
  public RecruitDemand getByPrimaryKey(String primaryKey) {
    return recruitDemandMapper.selectByPrimaryKey(primaryKey);
  }

  @Override
  public void create(RecruitDemand recruitDemand) {
    recruitDemandMapper.insert(recruitDemand);
  }

  @Override
  public void updateSelective(RecruitDemand recruitDemand) {
    recruitDemandMapper.updateByPrimaryKeySelective(recruitDemand);
  }

  @Override
  public void remove(String primaryKey) {
    recruitDemandMapper.deleteByPrimaryKey(primaryKey);
  }

  @Override
  public void updateSelectiveSelf(RecruitDemand recruitDemand, RecruitDemand recruitDemandOld,
      SysUser sysUser) {
    // TODO Auto-generated method stub
    RecruitDemandLog recruitDemandLog = new RecruitDemandLog();
    recruitDemandLog.setDemandId(recruitDemand.getId());
    recruitDemandLog.setUpdateDate(new Date());
    recruitDemandLog.setModifiedId(sysUser.getId());
    recruitDemandLog.setModifiedName(sysUser.getAccount());
    if (!recruitDemandOld.getWorkRemark().equals(recruitDemand.getWorkRemark())) {
      // 岗位描述有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getWorkRemark());
      recruitDemandLog.setOldStr(recruitDemandOld.getWorkRemark());
      recruitDemandLog.setUpdateField("岗位工作描述");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getGender().equals(recruitDemand.getGender())) {
      // 性别有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getGender());
      recruitDemandLog.setOldStr(recruitDemandOld.getGender());
      recruitDemandLog.setUpdateField("性别");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getEducation().equals(recruitDemand.getEducation())) {
      // 学历有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getEducation());
      recruitDemandLog.setOldStr(recruitDemandOld.getEducation());
      recruitDemandLog.setUpdateField("学历");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getProfession().equals(recruitDemand.getProfession())) {
      // 专业有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getProfession());
      recruitDemandLog.setOldStr(recruitDemandOld.getProfession());
      recruitDemandLog.setUpdateField("专业");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getWorkExperience().equals(recruitDemand.getWorkExperience())) {
      // 工作经验有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getWorkExperience());
      recruitDemandLog.setOldStr(recruitDemandOld.getWorkExperience());
      recruitDemandLog.setUpdateField("工作经验");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getRequiredSkill().equals(recruitDemand.getRequiredSkill())) {
      // 必备技能有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getRequiredSkill());
      recruitDemandLog.setOldStr(recruitDemandOld.getRequiredSkill());
      recruitDemandLog.setUpdateField("必备技能");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    if (!recruitDemandOld.getAbilityDemanded().equals(recruitDemand.getAbilityDemanded())) {
      // 素质及能力要求有变动 进行日志记录
      recruitDemandLog.setId(UUID.randomUUID().toString().replace("-", ""));
      recruitDemandLog.setNewStr(recruitDemand.getAbilityDemanded());
      recruitDemandLog.setOldStr(recruitDemandOld.getAbilityDemanded());
      recruitDemandLog.setUpdateField("素质及能力");
      recruitDemandLogMapper.insertSelective(recruitDemandLog);
    }
    recruitDemandMapper.updateByPrimaryKeySelective(recruitDemand);
  }
}
