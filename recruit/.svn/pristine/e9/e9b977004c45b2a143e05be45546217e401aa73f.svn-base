package com.csot.recruit.service.impl.campus;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;

import org.amberframework.core.mybatis.pojo.Page;
import org.amberframework.web.miniui.pojo.MiniGridPageSort;
import org.amberframework.web.miniui.pojo.MiniRtn2Grid;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.elasticsearch.common.collect.Lists;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.csot.recruit.common.util.CampusUtils;
import com.csot.recruit.common.util.CommonConstant;
import com.csot.recruit.common.util.ExcelReadUtils;
import com.csot.recruit.dao.original.campus.CampusStudentMapper;
import com.csot.recruit.model.datadict.DatadictGroupType;
import com.csot.recruit.model.original.campus.CampusPost;
import com.csot.recruit.model.original.campus.CampusStudent;
import com.csot.recruit.model.original.campus.CampusStudentColumns;
import com.csot.recruit.model.original.campus.CampusStudentCriteria;
import com.csot.recruit.service.campus.CampusAddressbookService;
import com.csot.recruit.service.campus.CampusPostService;
import com.csot.recruit.service.campus.CampusStudentService;
import com.csot.recruit.service.datadict.DatadictGroupTypeService;

@Service("campusStudentService")
public class CampusStudentServiceImpl implements CampusStudentService {
  private static final Logger logger = LoggerFactory.getLogger(CampusStudentServiceImpl.class);

  @Resource
  private CampusStudentMapper campusStudentMapper;

  @Resource
  private CampusAddressbookService campusAddressbookService;

  @Resource
  private CampusPostService campusPostService;

  @Resource
  private DatadictGroupTypeService datadictGroupTypeService;


  @Override
  public MiniRtn2Grid<CampusStudent> getGrid(MiniGridPageSort pageSort, String siteId,
      String postId, String stuName, String school, String org, String center, String yearth) {
    MiniRtn2Grid<CampusStudent> grid = new MiniRtn2Grid<CampusStudent>();
    // 组合查询编辑器应用如下：
    CampusStudentCriteria criteria = new CampusStudentCriteria();
    CampusStudentCriteria.Criteria criter = criteria.or();
    // 查询条件
    if (StringUtils.hasText(siteId)) {
      criter.andSiteIdEqualTo(siteId);
    }
    if (StringUtils.hasText(postId)) {
      criter.andPostIdEqualTo(postId);
    }
    if (StringUtils.hasText(stuName)) {
      criter.andRealnameLike("%" + stuName + "%");
    }
    if (StringUtils.hasText(school)) {
      criter.andSchoolLike("%" + school + "%");
    }
    if (StringUtils.hasText(org)) {
      criter.andOrganizationLike("%" + org + "%");
    }
    if (StringUtils.hasText(center)) {
      criter.andBigCenterLike("%" + center + "%");
    }
    if (StringUtils.hasText(yearth)) {
      criter.andYearthLike("%" + yearth + "%");
    }
    // 分页和排序
    if (pageSort.isShowPager()) {
      Page page = Page.newInstanceWithPageIndex(pageSort.getPageIndex(), pageSort.getPageSize());
      criteria.setPage(page);
    }
    String sortColumn = CampusStudentColumns.getColumn(pageSort.getSortField());
    if (StringUtils.hasText(sortColumn)) {
      StringBuilder sortStrBldr =
          new StringBuilder(sortColumn).append(" ").append(pageSort.getSortOrder());
      criteria.setOrderByClause(sortStrBldr.toString());
    }
    grid.setData(campusStudentMapper.selectByExample(criteria));
    grid.setTotal(campusStudentMapper.countByExample(criteria));
    return grid;
  }

  @Override
  public CampusStudent getByPrimaryKey(String primaryKey) {
    return campusStudentMapper.selectByPrimaryKey(primaryKey);
  }

  @Override
  public void create(CampusStudent campusStudent) {
    campusStudentMapper.insert(campusStudent);
  }

  @Override
  public void updateSelective(CampusStudent campusStudent) {
    campusStudentMapper.updateByPrimaryKeySelective(campusStudent);
  }

  @Override
  public void remove(String primaryKey) {
    campusStudentMapper.deleteByPrimaryKey(primaryKey);
  }

  @SuppressWarnings("resource")
  @Override
  public String importStudentInfo(MultipartFile multipartFile, String basePath) {


    String sourceName = multipartFile.getOriginalFilename();
    File file = new File(basePath);
    if (!file.exists()) {
      file.mkdirs();
    }
    String path = basePath + File.separator + sourceName;
    Workbook wb = null;
    String message = "";
    int count = 0;
    try {
      multipartFile.transferTo(new File(path));
      FileInputStream in = new FileInputStream(path);
      if (path.endsWith(".xls")) {
        wb = new HSSFWorkbook(in);
      } else if (path.endsWith(".xlsx")) {
        wb = new XSSFWorkbook(in);
      } else {
        return "导入文件格式不对!";
      }
      Sheet sheet = wb.getSheetAt(0);
      int rowNum = sheet.getLastRowNum();
      if (rowNum < 1) {
        logger.error("上传文件为空！");
        return "上传文件为空！";
      } else {
        for (int i = 1; i <= rowNum; i++) {
          Row row = sheet.getRow(i);
          // 获取做大列数
          int coloumNum = sheet.getRow(i).getPhysicalNumberOfCells();
          message = message.concat(checkStudentInfo(row, coloumNum));
          if ("".equals(message)) {
            count++;
          }
        }
        message = message.concat("总共成功导入" + count + "条数据!");
      }
    } catch (IllegalStateException | IOException e) {

      logger.debug(e.getMessage());
    }

    return message;
  }

  /**
   * 校验学生信息表
   * 
   * @param coloumNum最大列数
   * @return 校验错误提示信息
   */
  public String checkStudentInfo(Row row, int coloumNum) {

    String message = "";
    String index = ExcelReadUtils.getValue(row.getCell(0));
    String idNo = ExcelReadUtils.getValue(row.getCell(1));
    if (null != campusStudentMapper.selectByPrimaryKey(idNo)) {
      logger.error("学生信息已存在");
      message = message.concat("序号为" + index + "的学生信息已存在" + "\n");
    }
    if (idNo.length() < 18 || idNo.length() > 20) {
      logger.error("身份证号码长度应为18至20");
      message = message.concat("序号为" + index + "的身份证号码长度应为18至20" + "\n");
    }
    String siteName = ExcelReadUtils.getValue(row.getCell(2));
    if (campusAddressbookService.doGetSiteInfo("", siteName).size() <= 0) {
      logger.error("站点名不存在");
      message = message.concat("序号为" + index + "的站点名不存在" + "\n");
    }
    String orgName = ExcelReadUtils.getValue(row.getCell(4));
    if (null == datadictGroupTypeService.getTypeByGorupCodeAndName("campus_company", orgName)) {
      logger.error("组织名不存在");
      message = message.concat("序号为" + index + "的组织名不存在" + "\n");
    }
    String postName = ExcelReadUtils.getValue(row.getCell(9));
    if (null == datadictGroupTypeService.getTypeByGorupCodeAndName("pose_type", postName)) {
      logger.error("岗位名不存在");
      message = message.concat("序号为" + index + "的岗位名不存在" + "\n");
    }
    String sex = ExcelReadUtils.getValue(row.getCell(11));
    if (!"1".equals(sex) && !"2".equals(sex)) {
      logger.error("性别填写错误，请填写1(女)或2(男)");
      message = message.concat("序号为" + index + "的性别填写错误，请填写1(女)或2(男)" + "\n");
    }
    for (int j = 22; j <= 29; j++) {
      String isHas = ExcelReadUtils.getValue(row.getCell(j));
      if (!CommonConstant.YES.equals(isHas) && !CommonConstant.NO.equals(isHas)) {
        logger.error("第" + j + "列应填写有或无");
        message = message.concat("序号为" + index + "的第" + j + "列应填写有或无" + "\n");
      }
    }
    for (int k = 0; k <= coloumNum - 1; k++) {
      if (StringUtils.isEmpty(ExcelReadUtils.getValue(row.getCell(k)))) {
        logger.error("第" + k + "列为必填项！");
        message = message.concat("序号为" + index + "的第" + k + "列为必填项" + "\n");
      }
    }

    // 若校验全部通过
    if ("".equals(message)) {

      CampusStudent campusStu = doSetCampusStuInfo(row);

      campusStudentMapper.insert(campusStu);
    }

    return message;
  }

  /**
   * 获取excel表内容且set到CampusStudent对象中
   * 
   * @param row
   * @return
   */
  public CampusStudent doSetCampusStuInfo(Row row) {
    CampusStudent campusStu = new CampusStudent();
    campusStu.setId(ExcelReadUtils.getValue(row.getCell(1)));
    campusStu.setSiteName(ExcelReadUtils.getValue(row.getCell(2)));
    // 根据站点名查询站点id
    String siteId =
        campusAddressbookService.doGetSiteInfo("", ExcelReadUtils.getValue(row.getCell(2))).get(0)
            .getSiteId();
    campusStu.setSiteId(siteId);
    campusStu.setWorkingPlace(ExcelReadUtils.getValue(row.getCell(3)));
    // 根据组织名获取组织id，set到orgId中
    DatadictGroupType orgGroupType = new DatadictGroupType();
    orgGroupType =
        datadictGroupTypeService.getTypeByGorupCodeAndName("campus_company",
            ExcelReadUtils.getValue(row.getCell(4)));
    if (null != orgGroupType) {
      campusStu.setOrgId(orgGroupType.getTypeId());
      campusStu.setOrganization(orgGroupType.getTypeName());
    }
    campusStu.setBigCenter(ExcelReadUtils.getValue(row.getCell(5)));
    campusStu.setSmallCenter(ExcelReadUtils.getValue(row.getCell(6)));
    campusStu.setDepartment(ExcelReadUtils.getValue(row.getCell(7)));
    campusStu.setOffices(ExcelReadUtils.getValue(row.getCell(8)));

    // 根据岗位名称获取岗位id,职位族id,职位族名称,职位子类名称
    List<CampusPost> campusStuList = Lists.newArrayList();
    campusStuList =
        campusAddressbookService.doGetPostInfo("", ExcelReadUtils.getValue(row.getCell(9)));
    if (campusStuList.size() > 0) {
      campusStu.setPostId(campusStuList.get(0).getPostId());
      campusStu.setPostName(campusStuList.get(0).getPostName());
      // set 职位族id
      campusStu.setJobFamily(campusStuList.get(0).getJobFamily());
      // set 职位族名称
      campusStu.setJobFamilyName(campusStuList.get(0).getReserved2());
      // set 职位子类名称
      campusStu.setJobSubclass(campusStuList.get(0).getJobSubclass());
    }

    campusStu.setRealname(ExcelReadUtils.getValue(row.getCell(10)));
    campusStu.setSex(ExcelReadUtils.getValue(row.getCell(11)));
    campusStu.setEducation(ExcelReadUtils.getValue(row.getCell(12)));
    campusStu.setNativePlace(ExcelReadUtils.getValue(row.getCell(13)));
    campusStu.setSchool(ExcelReadUtils.getValue(row.getCell(14)));
    campusStu.setMajor(ExcelReadUtils.getValue(row.getCell(15)));
    campusStu.setPhoneNo(ExcelReadUtils.getValue(row.getCell(16)));
    campusStu.setEmail(ExcelReadUtils.getValue(row.getCell(17)));
    campusStu.setEvaluation(ExcelReadUtils.getValue(row.getCell(18)));
    campusStu.setMoraleRisk(ExcelReadUtils.getValue(row.getCell(19)));
    campusStu.setResultFirst(ExcelReadUtils.getValue(row.getCell(20)));
    campusStu.setResultSecond(ExcelReadUtils.getValue(row.getCell(21)));
    campusStu.setOffer(ExcelReadUtils.getValue(row.getCell(22)));
    campusStu.setIdcardCopy(ExcelReadUtils.getValue(row.getCell(23)));
    campusStu.setTrilateral(ExcelReadUtils.getValue(row.getCell(24)));
    campusStu.setReferenceForm(ExcelReadUtils.getValue(row.getCell(25)));
    campusStu.setTranscript(ExcelReadUtils.getValue(row.getCell(26)));
    campusStu.setCetTranscript(ExcelReadUtils.getValue(row.getCell(27)));
    campusStu.setPhoto(ExcelReadUtils.getValue(row.getCell(28)));
    campusStu.setBreakOff(ExcelReadUtils.getValue(row.getCell(29)));
    campusStu.setYearth(CampusUtils.getCurrentYearth());

    return campusStu;
  }

  /**
   * 根据查询条件导出学习资料信息
   * 
   * @param campusStuList
   */
  @Override
  public HSSFWorkbook exportCampusStuInfo(List<CampusStudent> campusStuList) {

    HSSFWorkbook wb = new HSSFWorkbook();
    HSSFSheet sheet = wb.createSheet("学生资料信息");

    // 表格第一行
    HSSFRow row1 = sheet.createRow(0);
    // 四个参数分别是：起始行，起始列，结束行，结束列
    sheet.addMergedRegion(new CellRangeAddress(0, (short) 0, 0, (short) 29));// 设置单元格合并，首行1到6列
    // 设定第0 2 5列的宽度
    sheet.setColumnWidth(0, 3500);
    sheet.setColumnWidth(2, 3500);
    sheet.setColumnWidth(5, 3500);

    row1.setHeightInPoints(25);
    HSSFCell cell1 = row1.createCell(0);
    cell1.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "1"));
    cell1.setCellValue("校园招聘学生资料详细信息");

    // 表头，title值
    String[] titles =
        {"序号", "身份证号", "站点", "工作地点", "组织", "大中心", "厂/小中心", "部门", "科室", "岗位", "姓名", "性别", "学历",
            "籍贯", "学校", "专业", "联系方式", "邮箱", "测评成绩", "心理风险", "一面得分", "二面得分", "Offer", "身份证复印件",
            "三方协议", "就业推荐表", "成绩", "四六级成绩单", "照片", "违约情况", "招聘年份期数"};
    // 表格第二行 ,设置列名
    HSSFRow titleRow = sheet.createRow(1);
    for (int j = 0; j < titles.length; j++) {
      HSSFCell titleCell = titleRow.createCell(j);
      // 设置表头格式
      titleCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "2"));
      titleCell.setCellValue(titles[j]);
    }
    writeCampusStuInfo(campusStuList, sheet, wb);

    return wb;
  }


  /**
   * 将campusStudent内容写入sheet中
   * 
   * @param campusStuList
   * @param sheet
   * @param wb
   * @return
   */
  public HSSFSheet writeCampusStuInfo(List<CampusStudent> campusStuList, HSSFSheet sheet,
      HSSFWorkbook wb) {
    // 填充Excel内容
    for (int i = 0; i < campusStuList.size(); i++) {
      // 从第三行开始填写表格信息
      HSSFRow row = sheet.createRow(i + 2);
      // 内容写入单元格且设置样式
      HSSFCell indexCell = row.createCell(0);
      indexCell.setCellValue(i + 1);
      indexCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell idNoCell = row.createCell(1);
      idNoCell.setCellValue(campusStuList.get(i).getId());
      idNoCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell siteNameCell = row.createCell(2);
      siteNameCell.setCellValue(campusStuList.get(i).getSiteName());
      siteNameCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell workPlaceCell = row.createCell(3);
      workPlaceCell.setCellValue(campusStuList.get(i).getWorkingPlace());
      workPlaceCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell orgCell = row.createCell(4);
      orgCell.setCellValue(campusStuList.get(i).getOrganization());
      orgCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell bigCenterCell = row.createCell(5);
      bigCenterCell.setCellValue(campusStuList.get(i).getBigCenter());
      bigCenterCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell smallCenterCell = row.createCell(6);
      smallCenterCell.setCellValue(campusStuList.get(i).getSmallCenter());
      smallCenterCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell departmentCell = row.createCell(7);
      departmentCell.setCellValue(campusStuList.get(i).getDepartment());
      departmentCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell officeCell = row.createCell(8);
      officeCell.setCellValue(campusStuList.get(i).getOffices());
      officeCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell jobCell = row.createCell(9);
      jobCell.setCellValue(campusStuList.get(i).getJobClass());
      jobCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell nameCell = row.createCell(10);
      nameCell.setCellValue(campusStuList.get(i).getRealname());
      nameCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell sexCell = row.createCell(11);
      sexCell.setCellValue(campusStuList.get(i).getSex());
      sexCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell educationCell = row.createCell(12);
      educationCell.setCellValue(campusStuList.get(i).getEducation());
      educationCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell nativePlaceCell = row.createCell(13);
      nativePlaceCell.setCellValue(campusStuList.get(i).getNativePlace());
      nativePlaceCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell schoolCell = row.createCell(14);
      schoolCell.setCellValue(campusStuList.get(i).getSchool());
      schoolCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell majorCell = row.createCell(15);
      majorCell.setCellValue(campusStuList.get(i).getMajor());
      majorCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell phoneNoCell = row.createCell(16);
      phoneNoCell.setCellValue(campusStuList.get(i).getPhoneNo());
      phoneNoCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell emailCell = row.createCell(17);
      emailCell.setCellValue(campusStuList.get(i).getEmail());
      emailCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell evaluationCell = row.createCell(18);
      evaluationCell.setCellValue(campusStuList.get(i).getEvaluation());
      evaluationCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell riskCell = row.createCell(19);
      riskCell.setCellValue(campusStuList.get(i).getMoraleRisk());
      riskCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell firstCell = row.createCell(20);
      firstCell.setCellValue(campusStuList.get(i).getResultFirst());
      firstCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell secondCell = row.createCell(21);
      secondCell.setCellValue(campusStuList.get(i).getResultSecond());
      secondCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell offerCell = row.createCell(22);
      offerCell.setCellValue(campusStuList.get(i).getOffer());
      offerCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell idCardCell = row.createCell(23); // 身份证复印件
      idCardCell.setCellValue(campusStuList.get(i).getIdcardCopy());
      idCardCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell trilateralCell = row.createCell(24); // 三方
      trilateralCell.setCellValue(campusStuList.get(i).getTrilateral());
      trilateralCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell referenceCell = row.createCell(25); // 就业推荐表
      referenceCell.setCellValue(campusStuList.get(i).getReferenceForm());
      referenceCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell transcriptCell = row.createCell(26); // 成绩单
      transcriptCell.setCellValue(campusStuList.get(i).getTranscript());
      transcriptCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell cetTranscriptCell = row.createCell(27); // 四六级成绩单
      cetTranscriptCell.setCellValue(campusStuList.get(i).getCetTranscript());
      cetTranscriptCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell photoCell = row.createCell(28); // 照片
      photoCell.setCellValue(campusStuList.get(i).getPhoto());
      photoCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell breakOffCell = row.createCell(29); // 违约情况
      breakOffCell.setCellValue(campusStuList.get(i).getBreakOff());
      breakOffCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));
      HSSFCell yearthCell = row.createCell(30); // 招聘年份季度
      yearthCell.setCellValue(campusStuList.get(i).getYearth());
      yearthCell.setCellStyle(campusAddressbookService.doSetCellStyle(wb, sheet, "3"));

    }
    return sheet;
  }

}
