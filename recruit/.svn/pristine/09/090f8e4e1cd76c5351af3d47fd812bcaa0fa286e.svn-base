package com.csot.recruit.service.impl.flow.employ;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.amberframework.core.mybatis.pojo.Page;
import org.amberframework.web.miniui.pojo.MiniGridPageSort;
import org.amberframework.web.miniui.pojo.MiniRtn2Grid;
import org.amberframework.web.system.auth.model.original.user.SysUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.csot.recruit.dao.org.OrganazationMapper;
import com.csot.recruit.dao.original.candidate.CandidatePostMapper;
import com.csot.recruit.dao.original.flow.employ.EmployARalationMapper;
import com.csot.recruit.dao.original.flow.employ.EmployCandidateMapper;
import com.csot.recruit.dao.original.flow.employ.EmployDemandMapper;
import com.csot.recruit.dao.original.flow.employ.EmployEducationMapper;
import com.csot.recruit.dao.original.flow.employ.EmployMapper;
import com.csot.recruit.dao.original.flow.employ.EmployWorkMapper;
import com.csot.recruit.dao.original.uniform.JobMapper;
import com.csot.recruit.dao.original.uniform.OrganizationMapper;
import com.csot.recruit.model.original.flow.employ.Employ;
import com.csot.recruit.model.original.flow.employ.EmployARalation;
import com.csot.recruit.model.original.flow.employ.EmployARalationCriteria;
import com.csot.recruit.model.original.flow.employ.EmployCandidate;
import com.csot.recruit.model.original.flow.employ.EmployColumns;
import com.csot.recruit.model.original.flow.employ.EmployCriteria;
import com.csot.recruit.model.original.flow.employ.EmployDemandCriteria;
import com.csot.recruit.model.original.flow.employ.EmployEducation;
import com.csot.recruit.model.original.flow.employ.EmployEducationCriteria;
import com.csot.recruit.model.original.flow.employ.EmployWork;
import com.csot.recruit.model.original.flow.employ.EmployCriteria.Criteria;
import com.csot.recruit.model.original.flow.employ.EmployDemand;
import com.csot.recruit.model.original.flow.employ.EmployWorkCriteria;
import com.csot.recruit.model.original.flow.recruitdemand.RdARalation;
import com.csot.recruit.model.original.flow.recruitdemand.RecruitDemand;
import com.csot.recruit.model.original.uniform.Job;
import com.csot.recruit.model.original.uniform.Organization;
import com.csot.recruit.model.original.uniform.OrganizationCriteria;
import com.csot.recruit.service.flow.employ.EmployService;

@Service("employService")
public class EmployServiceImpl implements EmployService {
  private static final Logger logger = LoggerFactory.getLogger(EmployServiceImpl.class);

  @Resource
  private EmployMapper employMapper;
  @Resource
  private JobMapper jobMapper;
  @Resource
  private OrganizationMapper organizationMapper;
  @Resource
  private CandidatePostMapper candidatePostMapper;
  @Resource
  private EmployCandidateMapper employCandidateMapper;
  @Resource
  private EmployDemandMapper employDemandMapper;
  @Resource
  private EmployEducationMapper employEducationMapper;
  @Resource
  private EmployWorkMapper employWorkMapper;
  @Resource
  private EmployARalationMapper employARalationMapper;

  @Override
  public MiniRtn2Grid<Employ> getGrid(MiniGridPageSort pageSort, String searchKey) {
    MiniRtn2Grid<Employ> grid = new MiniRtn2Grid<Employ>();
    EmployCriteria criteria = new EmployCriteria();
    // 查询条件
    if (StringUtils.hasText(searchKey)) {
      criteria.createCriteria().andIdEqualTo(searchKey);
    }
    // 分页和排序
    if (pageSort.isShowPager()) {
      Page page = Page.newInstanceWithPageIndex(pageSort.getPageIndex(), pageSort.getPageSize());
      criteria.setPage(page);
    }
    String sortColumn = EmployColumns.getColumn(pageSort.getSortField());
    if (StringUtils.hasText(sortColumn)) {
      StringBuilder sortStrBldr =
          new StringBuilder(sortColumn).append(" ").append(pageSort.getSortOrder());
      criteria.setOrderByClause(sortStrBldr.toString());
    }
    grid.setData(employMapper.selectByExample(criteria));
    grid.setTotal(employMapper.countByExample(criteria));
    return grid;
  }

  @Override
  public Employ getByPrimaryKey(String primaryKey) {
    return employMapper.selectByPrimaryKey(primaryKey);
  }

  @Override
  public boolean create(Employ employ) {
    EmployCriteria example1 = new EmployCriteria();
    example1.createCriteria().andCandidateIdEqualTo(employ.getCandidateId());
    List<Employ> employs = employMapper.selectByExample(example1);
    if (employs.size() > 0) {
      // 该候选人已经申请
      return false;
    }
    // 获取职位信息进行数据初始化
    Job job = jobMapper.selectByCode(employ.getEmployPostId());
    employ.setEmployPostName(job.getcJobname());
    employ.setEmployOrgId(job.getcOrgcode());

    OrganizationCriteria example = new OrganizationCriteria();
    example.createCriteria().andCOrgcodeEqualTo(job.getcOrgcode());
    List<Organization> organizations = organizationMapper.selectByExample(example);
    if (organizations != null && organizations.size() > 0) {
      employ.setEmployOrgName(organizations.get(0).getcOrgname());
    }
    employ.setStage(Employ.stage.UNCOMMITTED.valueStr()); // 默认创建为未提交的草稿状态
    employ.setFlowState(Employ.flowState.UNCOMMITTED.valueStr()); // 默认创建为未提交的草稿状态
    employMapper.insert(employ);
    return true;
  }

  @Override
  public void updateSelective(Employ employ) {
    employMapper.updateByPrimaryKeySelective(employ);
  }

  @Override
  public void remove(String primaryKey) {
    employMapper.deleteByPrimaryKey(primaryKey);
  }

  /**
   * 保存录用详情信息
   */
  @Override
  public void saveEmployInfo(EmployCandidate employCandidate, Employ employ,
      RecruitDemand recruitDemand, List<EmployWork> works, List<EmployEducation> edus,
      String attchmentIds,SysUser sysUser) {
    // 设置录用候选人信息
    employCandidate.setEmployId(employ.getId());
    employCandidate.setId(UUID.randomUUID().toString().replace("-", ""));
    employCandidate.setCreateDate(new Date());
    employCandidate.setCreatorId(sysUser.getId());
    employCandidateMapper.insert(employCandidate);
    // 新增录用需求信息
    EmployDemand employDemand = new EmployDemand();
    employDemand.setId(UUID.randomUUID().toString().replace("-", ""));
    employDemand.setEmployId(employ.getId());
    employDemand.setApplyOrganizationId(recruitDemand.getApplyOrganizationId());
    employDemand.setApplyOrganizationName(recruitDemand.getApplyOrganizationName());
    employDemand.setApplyPostId(recruitDemand.getApplyPostId());
    employDemand.setApplyPostName(recruitDemand.getApplyPostName());
    employDemand.setCreateDate(new Date());
    employDemand.setDemandId(recruitDemand.getDemandId());
    employDemand.setDistrict(recruitDemand.getDistrict());
    employDemand.setEmployeeType(recruitDemand.getEmployeeType());
    employDemand.setRankId(recruitDemand.getRankId());
    employDemand.setRecruitDemandReason(recruitDemand.getRecruitDemandReason());
    employDemand.setCreatorId(sysUser.getId());
    employDemandMapper.insert(employDemand);
    // 修改录用主体信息
    employMapper.updateByPrimaryKey(employ);
    // 删除录用教育经历和工作经历
    EmployEducationCriteria employEducationExample = new EmployEducationCriteria();
    employEducationExample.createCriteria().andEmployIdEqualTo(employ.getId());
    employEducationMapper.deleteByExample(employEducationExample);
    EmployWorkCriteria employWorkExample = new EmployWorkCriteria();
    employWorkExample.createCriteria().andEmployIdEqualTo(employ.getId());
    employWorkMapper.deleteByExample(employWorkExample);
    // 循环录入教育经历和工作经历
    if (edus != null && edus.size() > 0) {
      for (EmployEducation employEducation : edus) {
        employEducation.setId(UUID.randomUUID().toString().replace("-", ""));
        employEducation.setCreateDate(new Date());
        employEducation.setCreatorId(sysUser.getId());
        employEducation.setEmployId(employ.getId());
        employEducationMapper.insert(employEducation);
      }
    }
    if (works != null && works.size() > 0) {
      for (EmployWork employWork : works) {
        employWork.setId(UUID.randomUUID().toString().replace("-", ""));
        employWork.setEmployId(employ.getId());
        employWork.setCreateDate(new Date());
        employWork.setCreatorId(sysUser.getId());
        employWorkMapper.insert(employWork);
      }
    }
    // 删除原有附件
    EmployARalationCriteria example = new EmployARalationCriteria();
    example.createCriteria().andEmployIdEqualTo(employ.getId());
    employARalationMapper.deleteByExample(example);
    // 添加附件
    if (attchmentIds != null && (!attchmentIds.equals(""))) {
      String[] ids = attchmentIds.split(",");
      EmployARalation employARalation = null;
      for (String id : ids) {
        employARalation = new EmployARalation();
        employARalation.setCreateDate(new Date());
        employARalation.setCreatorId(sysUser.getId());
        employARalation.setId(UUID.randomUUID().toString().replace("-", ""));;
        employARalation.setAttachmentId(id);
        employARalation.setEmployId(employ.getId());
        employARalationMapper.insertSelective(employARalation);
      }
    }
  }

  @Override
  public void updateEmployInfo(EmployCandidate employCandidate, Employ employ,
      RecruitDemand recruitDemand, List<EmployWork> works, List<EmployEducation> edus,
      String attchmentIds,SysUser sysUser) {
    employCandidate.setUpdateDate(new Date());
    employCandidate.setModifiedId(sysUser.getId());
    employCandidateMapper.updateByPrimaryKeySelective(employCandidate); // 修改录用候选人信息
    if (!employ.getDemandId().equals(recruitDemand.getDemandId())) { // 招聘需求有修改
      EmployDemand employDemand = new EmployDemand();
      //获取录用招聘表
      EmployDemandCriteria example = new EmployDemandCriteria();
      example.createCriteria().andEmployIdEqualTo(employ.getId());
      List<EmployDemand> employDemands = employDemandMapper.selectByExample(example);
      if (employDemands != null && employDemands.size() > 0) {
        employDemand = employDemands.get(0);
      }
      //设置新需求信息
      employDemand.setApplyOrganizationId(recruitDemand.getApplyOrganizationId());
      employDemand.setApplyOrganizationName(recruitDemand.getApplyOrganizationName());
      employDemand.setApplyPostId(recruitDemand.getApplyPostId());
      employDemand.setApplyPostName(recruitDemand.getApplyPostName());
      employDemand.setUpdateDate(new Date());
      employDemand.setDemandId(recruitDemand.getDemandId());
      employDemand.setDistrict(recruitDemand.getDistrict());
      employDemand.setEmployeeType(recruitDemand.getEmployeeType());
      employDemand.setRankId(recruitDemand.getRankId());
      employDemand.setRecruitDemandReason(recruitDemand.getRecruitDemandReason());
      employDemand.setModifiedId(sysUser.getId());
      employDemandMapper.updateByPrimaryKey(employDemand);
      employ.setDemandId(recruitDemand.getDemandId());
    }
    // 修改录用主体信息
    employMapper.updateByPrimaryKeySelective(employ);
    // 删除录用教育经历和工作经历
    EmployEducationCriteria employEducationExample = new EmployEducationCriteria();
    employEducationExample.createCriteria().andEmployIdEqualTo(employ.getId());
    employEducationMapper.deleteByExample(employEducationExample);
    EmployWorkCriteria employWorkExample = new EmployWorkCriteria();
    employWorkExample.createCriteria().andEmployIdEqualTo(employ.getId());
    employWorkMapper.deleteByExample(employWorkExample);
    // 循环录入教育经历和工作经历
    if (edus != null && edus.size() > 0) {
      for (EmployEducation employEducation : edus) {
        employEducation.setId(UUID.randomUUID().toString().replace("-", ""));
        employEducation.setCreateDate(new Date());
        employEducation.setEmployId(employ.getId());
        employEducationMapper.insert(employEducation);
      }
    }
    if (works != null && works.size() > 0) {
      for (EmployWork employWork : works) {
        employWork.setId(UUID.randomUUID().toString().replace("-", ""));
        employWork.setEmployId(employ.getId());
        employWork.setCreateDate(new Date());
        employWorkMapper.insert(employWork);
      }
    }
    // 删除原有附件
    EmployARalationCriteria example = new EmployARalationCriteria();
    example.createCriteria().andEmployIdEqualTo(employ.getId());
    employARalationMapper.deleteByExample(example);
    // 添加附件
    if (attchmentIds != null && (!attchmentIds.equals(""))) {
      String[] ids = attchmentIds.split(",");
      EmployARalation employARalation = null;
      for (String id : ids) {
        employARalation = new EmployARalation();
        employARalation.setCreateDate(new Date());
        // employARalation.setCreatorId(sysUser.getId());
        employARalation.setId(UUID.randomUUID().toString().replace("-", ""));;
        employARalation.setAttachmentId(id);
        employARalation.setEmployId(employ.getId());
        employARalationMapper.insertSelective(employARalation);
      }
    }

  }
}
