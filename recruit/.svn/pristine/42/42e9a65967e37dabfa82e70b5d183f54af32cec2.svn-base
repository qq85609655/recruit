package com.csot.recruit.controller.candidate;

import com.csot.recruit.model.original.candidate.Candidate;
import com.csot.recruit.model.original.candidate.CandidatePost;
import com.csot.recruit.model.original.log.OperateHistory;
import com.csot.recruit.service.candidate.CandidateService;
import com.csot.recruit.service.log.OperateHistoryService;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.amberframework.core.bind.annotation.CurrentUser;
import org.amberframework.core.common.model.AjaxRtnJson;
import org.amberframework.web.miniui.pojo.MiniGridPageSort;
import org.amberframework.web.miniui.pojo.MiniRtn2Grid;
import org.amberframework.web.system.auth.model.original.user.SysUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("candidateController")
public class CandidateController {
    private static final Logger logger = LoggerFactory.getLogger(CandidateController.class);

    @Resource
    private CandidateService candidateService;
    
    @Resource
    private OperateHistoryService operateHistoryService ;

    @RequestMapping("list")
    public ModelAndView list() {
        return new ModelAndView("com/csot/candidate/candidateList");
    }

    @RequestMapping("datagrid")
    @ResponseBody
    public MiniRtn2Grid<Candidate> datagrid(MiniGridPageSort pageSort, HttpServletRequest request) {
        String searchKey = request.getParameter("searchKey");
        return candidateService.getGrid(pageSort, searchKey);
    }

    @RequestMapping("create")
    public ModelAndView create() {
        return new ModelAndView("com/csot/recruit/candidate/candidateEdit");
    }

    @RequestMapping("modify/{id}")
    public ModelAndView modify(@PathVariable String id, HttpServletRequest request) {
        Candidate candidate = candidateService.getByPrimaryKey(id);
        request.setAttribute("candidate", candidate);
        return new ModelAndView("com/csot/recruit/candidate/candidateEdit");
    }

    @RequestMapping("view/{id}")
    public ModelAndView view(@PathVariable String id, HttpServletRequest request) {
        Candidate candidate = candidateService.getByPrimaryKey(id);
        request.setAttribute("candidate", candidate);
        return new ModelAndView("com/csot/recruit/candidate/candidateView");
    }

    @RequestMapping("remove/{id}")
    @ResponseBody
    public AjaxRtnJson remove(@PathVariable String id) {
        try {
            candidateService.remove(id);
            return new AjaxRtnJson(true, "删除成功");
        } catch (DataAccessException e) {
            logger.error(e.getMessage(), e);
            return new AjaxRtnJson(false, "删除失败: " + e.getMessage());
        }
    }

    @RequestMapping("save")
    @ResponseBody
    public AjaxRtnJson save(Candidate candidate) {
        if (StringUtils.hasText(candidate.getId())) {
            try {
                candidateService.updateSelective(candidate);
                return new AjaxRtnJson(true, "修改成功");
            } catch (DataAccessException e) {
                logger.error(e.getMessage(), e);
                return new AjaxRtnJson(false, "修改失败: " + e.getMessage());
            }
        } else {
            try {
                candidate.setId(UUID.randomUUID().toString().replace("-", ""));
                candidateService.create(candidate);
                return new AjaxRtnJson(true, "新建成功");
            } catch (DataAccessException e) {
                logger.error(e.getMessage(), e);
                return new AjaxRtnJson(false, "新建失败: " + e.getMessage());
            }
        }
    }
    
    @RequestMapping("unlockCandidate")
    @ResponseBody
    public Map<String,Object> unlockCandidate(@CurrentUser SysUser sysUser,String ids){
      Map<String,Object> map = new HashMap<String,Object>();
      if(StringUtils.hasText(ids)){
        candidateService.unlockCandidate(ids, sysUser.getId());
        map.put("msg", "解锁成功");
      }else{
        map.put("msg", "候选人不能为空");
      }
      return map ;
    }
    
    @RequestMapping("changePosition")
    @ResponseBody
    public Map<String,Object> changePosition(@CurrentUser SysUser sysUser, HttpServletResponse response,String candidateId,String applyPostId,String oldPositionId){
      Map<String,Object> map = new HashMap<String,Object>();
      Map<String,Object> param = null ;
      if(StringUtils.hasText(candidateId)){
        List<CandidatePost> list = new ArrayList<CandidatePost>();
        list = candidateService.selectCandidatePostListByCandidateId(candidateId);
        for(CandidatePost cp : list){
          if(applyPostId.equals(cp.getPositionId())){
            map.put("msg", "转向失败，该候选人已经在岗位需求内");
            return map ;
          }
        }
        param = new HashMap<String, Object>();
        param.put("candidateId", candidateId);
        param.put("positionId", oldPositionId);
       CandidatePost candidatePost = new CandidatePost();  
       candidatePost = candidateService.selectCandidatePostByMap(param);
       candidatePost.setNowPositionId(applyPostId);
       candidateService.updateCandidatePostSelective(candidatePost);
       OperateHistory operateHistory = new OperateHistory();
       
       operateHistory.setId(UUID.randomUUID().toString().replace("-", ""));
       operateHistory.setOperatorUser(sysUser.getId());
       operateHistory.setOperatorType("候选人转向");
       operateHistory.setOperatorContent(oldPositionId+"转向到"+applyPostId);
       operateHistory.setRelatedId(candidateId);
       operateHistory.setOperatorTime(new Date());
       operateHistoryService.create(operateHistory);
       
       map.put("msg", "转向成功");
       return map ;
      }else{
        map.put("msg", "转向失败，候选人不能为空");
        return map ;
      }
    }
}