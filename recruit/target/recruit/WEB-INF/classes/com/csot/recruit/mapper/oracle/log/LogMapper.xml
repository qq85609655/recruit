<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.csot.recruit.dao.log.LogMapper" >
  <resultMap id="BaseResultMap" type="com.csot.recruit.model.log.Log" >
    <id column="logid" property="logid" jdbcType="VARCHAR" />
    <result column="broswer" property="broswer" jdbcType="VARCHAR" />
    <result column="logcontent" property="logcontent" jdbcType="VARCHAR" />
    <result column="loglevel" property="loglevel" jdbcType="INTEGER" />
    <result column="privacylevel" property="privacylevel" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="operatetime" property="operatetime" jdbcType="TIMESTAMP" />
    <result column="operatetype" property="operatetype" jdbcType="VARCHAR" />
    <result column="userid" property="account" jdbcType="VARCHAR" />
    <result column="operand" property="operand" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    logid, broswer, logcontent, loglevel, privacylevel, note, operatetime, operatetype, userid, operand
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.csot.recruit.model.log.LogCriteria" >
    <include refid="Oracle_Dialect_Pagination_Prefix" />
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_SYS_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="Oracle_Dialect_Pagination_Suffix" />
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from T_SYS_LOG
    where logid = #{logid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from T_SYS_LOG
    where logid = #{logid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.csot.recruit.model.log.LogCriteria" >
    delete from T_SYS_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.csot.recruit.model.log.Log" >
    insert into T_SYS_LOG (logid, broswer, logcontent, 
      loglevel, privacylevel, note, operatetime, 
      operatetype, userid, operand)
    values (#{logid,jdbcType=VARCHAR}, #{broswer,jdbcType=VARCHAR}, #{logcontent,jdbcType=VARCHAR}, 
      #{loglevel,jdbcType=INTEGER}, #{privacylevel,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, #{operatetime,jdbcType=TIMESTAMP}, 
      #{operatetype,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{operand,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.csot.recruit.model.log.Log" >
    insert into T_SYS_LOG
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="logid != null" >
        logid,
      </if>
      <if test="broswer != null" >
        broswer,
      </if>
      <if test="logcontent != null" >
        logcontent,
      </if>
      <if test="loglevel != null" >
        loglevel,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="operatetime != null" >
        operatetime,
      </if>
      <if test="operatetype != null" >
        operatetype,
      </if>
      <if test="account != null" >
        userid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="logid != null" >
        #{logid,jdbcType=VARCHAR},
      </if>
      <if test="broswer != null" >
        #{broswer,jdbcType=VARCHAR},
      </if>
      <if test="logcontent != null" >
        #{logcontent,jdbcType=VARCHAR},
      </if>
      <if test="loglevel != null" >
        #{loglevel,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="operatetime != null" >
        #{operatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="operatetype != null" >
        #{operatetype,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.csot.recruit.model.log.LogCriteria" resultType="java.lang.Integer" >
    select count(*) from T_SYS_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update T_SYS_LOG
    <set >
      <if test="record.logid != null" >
        logid = #{record.logid,jdbcType=VARCHAR},
      </if>
      <if test="record.broswer != null" >
        broswer = #{record.broswer,jdbcType=VARCHAR},
      </if>
      <if test="record.logcontent != null" >
        logcontent = #{record.logcontent,jdbcType=VARCHAR},
      </if>
      <if test="record.loglevel != null" >
        loglevel = #{record.loglevel,jdbcType=INTEGER},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.operatetime != null" >
        operatetime = #{record.operatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operatetype != null" >
        operatetype = #{record.operatetype,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null" >
        userid = #{record.account,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update T_SYS_LOG
    set logid = #{record.logid,jdbcType=VARCHAR},
      broswer = #{record.broswer,jdbcType=VARCHAR},
      logcontent = #{record.logcontent,jdbcType=VARCHAR},
      loglevel = #{record.loglevel,jdbcType=INTEGER},
      note = #{record.note,jdbcType=VARCHAR},
      operatetime = #{record.operatetime,jdbcType=TIMESTAMP},
      operatetype = #{record.operatetype,jdbcType=VARCHAR},
      userid = #{record.account,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.csot.recruit.model.log.Log" >
    update T_SYS_LOG
    <set >
      <if test="broswer != null" >
        broswer = #{broswer,jdbcType=VARCHAR},
      </if>
      <if test="logcontent != null" >
        logcontent = #{logcontent,jdbcType=VARCHAR},
      </if>
      <if test="loglevel != null" >
        loglevel = #{loglevel,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="operatetime != null" >
        operatetime = #{operatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="operatetype != null" >
        operatetype = #{operatetype,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        userid = #{account,jdbcType=VARCHAR},
      </if>
    </set>
    where logid = #{logid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.csot.recruit.model.log.Log" >
    update T_SYS_LOG
    set broswer = #{broswer,jdbcType=VARCHAR},
      logcontent = #{logcontent,jdbcType=VARCHAR},
      loglevel = #{loglevel,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR},
      operatetime = #{operatetime,jdbcType=TIMESTAMP},
      operatetype = #{operatetype,jdbcType=VARCHAR},
      userid = #{account,jdbcType=VARCHAR}
    where logid = #{logid,jdbcType=VARCHAR}
  </update>
  <sql id="Oracle_Dialect_Pagination_Prefix" >
    <if test="page != null" >
      select * from ( select row_.*, rownum rownum_ from ( 
    </if>
  </sql>
  <sql id="Oracle_Dialect_Pagination_Suffix" >
    <if test="page != null" >
      <![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]>
    </if>
  </sql>
</mapper>