<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.csot.recruit.dao.position.DepartmentRequireMapper" >
  <resultMap id="BaseResultMap" type="com.csot.recruit.model.position.DepartmentRequire" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="department" property="department" jdbcType="CHAR" />
    <result column="position_code" property="positionCode" jdbcType="CHAR" />
    <result column="demands" property="demands" jdbcType="INTEGER" />
    <result column="effective_date" property="effectiveDate" jdbcType="TIMESTAMP" />
    <result column="expect_date" property="expectDate" jdbcType="TIMESTAMP" />
    <result column="demand_type" property="demandType" jdbcType="INTEGER" />
    <result column="recruit_position_id" property="recruitPositionId" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, department, position_code, demands, effective_date, expect_date, demand_type, 
    recruit_position_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.csot.recruit.model.position.DepartmentRequireCriteria" >
    <include refid="Oracle_Dialect_Pagination_Prefix" />
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_POSITION_DEPARTMENT_REQUIRE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="Oracle_Dialect_Pagination_Suffix" />
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from T_POSITION_DEPARTMENT_REQUIRE
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from T_POSITION_DEPARTMENT_REQUIRE
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.csot.recruit.model.position.DepartmentRequireCriteria" >
    delete from T_POSITION_DEPARTMENT_REQUIRE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.csot.recruit.model.position.DepartmentRequire" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      select SQ_PO_DE_RE_ID.NEXTVAL from dual
    </selectKey>
    insert into T_POSITION_DEPARTMENT_REQUIRE (id, department, position_code, 
      demands, effective_date, expect_date, 
      demand_type, recruit_position_id)
    values (#{id,jdbcType=INTEGER}, #{department,jdbcType=CHAR}, #{positionCode,jdbcType=CHAR}, 
      #{demands,jdbcType=INTEGER}, #{effectiveDate,jdbcType=TIMESTAMP}, #{expectDate,jdbcType=TIMESTAMP}, 
      #{demandType,jdbcType=CHAR}, #{recruitPositionId,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.csot.recruit.model.position.DepartmentRequire" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      select SQ_PO_DE_RE_ID.NEXTVAL from dual
    </selectKey>
    insert into T_POSITION_DEPARTMENT_REQUIRE
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="positionCode != null" >
        position_code,
      </if>
      <if test="demands != null" >
        demands,
      </if>
      <if test="effectiveDate != null" >
        effective_date,
      </if>
      <if test="expectDate != null" >
        expect_date,
      </if>
      <if test="demandType != null" >
        demand_type,
      </if>
      <if test="recruitPositionId != null" >
        recruit_position_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="department != null" >
        #{department,jdbcType=CHAR},
      </if>
      <if test="positionCode != null" >
        #{positionCode,jdbcType=CHAR},
      </if>
      <if test="demands != null" >
        #{demands,jdbcType=INTEGER},
      </if>
      <if test="effectiveDate != null" >
        #{effectiveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectDate != null" >
        #{expectDate,jdbcType=TIMESTAMP},
      </if>
      <if test="demandType != null" >
        #{demandType,jdbcType=CHAR},
      </if>
      <if test="recruitPositionId != null" >
        #{recruitPositionId,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.csot.recruit.model.position.DepartmentRequireCriteria" resultType="java.lang.Integer" >
    select count(*) from T_POSITION_DEPARTMENT_REQUIRE
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update T_POSITION_DEPARTMENT_REQUIRE
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.department != null" >
        department = #{record.department,jdbcType=CHAR},
      </if>
      <if test="record.positionCode != null" >
        position_code = #{record.positionCode,jdbcType=CHAR},
      </if>
      <if test="record.demands != null" >
        demands = #{record.demands,jdbcType=INTEGER},
      </if>
      <if test="record.effectiveDate != null" >
        effective_date = #{record.effectiveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expectDate != null" >
        expect_date = #{record.expectDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.demandType != null" >
        demand_type = #{record.demandType,jdbcType=INTEGER},
      </if>
      <if test="record.recruitPositionId != null" >
        recruit_position_id = #{record.recruitPositionId,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update T_POSITION_DEPARTMENT_REQUIRE
    set id = #{record.id,jdbcType=INTEGER},
      department = #{record.department,jdbcType=CHAR},
      position_code = #{record.positionCode,jdbcType=CHAR},
      demands = #{record.demands,jdbcType=INTEGER},
      effective_date = #{record.effectiveDate,jdbcType=TIMESTAMP},
      expect_date = #{record.expectDate,jdbcType=TIMESTAMP},
      demand_type = #{record.demandType,jdbcType=INTEGER},
      recruit_position_id = #{record.recruitPositionId,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.csot.recruit.model.position.DepartmentRequire" >
    update T_POSITION_DEPARTMENT_REQUIRE
    <set >
      <if test="department != null" >
        department = #{department,jdbcType=CHAR},
      </if>
      <if test="positionCode != null" >
        position_code = #{positionCode,jdbcType=CHAR},
      </if>
      <if test="demands != null" >
        demands = #{demands,jdbcType=INTEGER},
      </if>
      <if test="effectiveDate != null" >
        effective_date = #{effectiveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectDate != null" >
        expect_date = #{expectDate,jdbcType=TIMESTAMP},
      </if>
      <if test="demandType != null" >
        demand_type = #{demandType,jdbcType=INTEGER},
      </if>
      <if test="recruitPositionId != null" >
        recruit_position_id = #{recruitPositionId,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.csot.recruit.model.position.DepartmentRequire" >
    update T_POSITION_DEPARTMENT_REQUIRE
    set department = #{department,jdbcType=CHAR},
      position_code = #{positionCode,jdbcType=CHAR},
      demands = #{demands,jdbcType=INTEGER},
      effective_date = #{effectiveDate,jdbcType=TIMESTAMP},
      expect_date = #{expectDate,jdbcType=TIMESTAMP},
      demand_type = #{demandType,jdbcType=INTEGER},
      recruit_position_id = #{recruitPositionId,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="Oracle_Dialect_Pagination_Prefix" >
    <if test="page != null" >
      select * from ( select row_.*, rownum rownum_ from ( 
    </if>
  </sql>
  <sql id="Oracle_Dialect_Pagination_Suffix" >
    <if test="page != null" >
      <![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]>
    </if>
  </sql>
</mapper>