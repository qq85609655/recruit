
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.csot.recruit.common.webservice.applicantInfo;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import javax.annotation.Resource;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

import com.csot.recruit.model.datadict.DatadictGroup;
import com.csot.recruit.model.original.interview.InterviewInfo;
import com.csot.recruit.model.resume.EducationExperience;
import com.csot.recruit.model.resume.WorkExperience;
import com.csot.recruit.service.interview.InterviewInfoService;
import com.csot.recruit.service.resume.EducationExperienceService;
import com.csot.recruit.service.resume.WorkExperienceService;

/**
 * This class was generated by Apache CXF 2.7.12
 * 2017-03-14T09:11:19.035+08:00
 * Generated source version: 2.7.12
 * 
 */

@javax.jws.WebService(
                      serviceName = "ESB_HRZP_HRZP_InquiryApplicantInfoSrv.serviceagent",
                      portName = "ESB_HRZP_HRZP_InquiryApplicantInfoSrv",
                      targetNamespace = "http://webservice.plm.csot.kmss.landray.com/",
                      wsdlLocation = "http://t2eaesbapp01.csot.tcl.com:9016/CoreServices/BusinessServices/Services/ESB_HRZP_HRZP_InquiryApplicantInfoSrv/v1.0.0/ESB_HRZP_HRZP_InquiryApplicantInfoSrv.serviceagent?wsdl",
                      endpointInterface = "com.csot.recruit.common.webservice.applicantInfo.ESBHRZPHRZPInquiryApplicantInfoSrv")
                      
public class ESBHRZPHRZPInquiryApplicantInfoSrvImpl implements ESBHRZPHRZPInquiryApplicantInfoSrv {

    private static final Logger LOG = Logger.getLogger(ESBHRZPHRZPInquiryApplicantInfoSrvImpl.class.getName());

    @Resource
    private InterviewInfoService interviewInfoService;
    
    @Resource
    private EducationExperienceService educationExperienceService;
    
    @Resource
    private WorkExperienceService workExperienceService;
    
    /* (non-Javadoc)
     * @see applicantInfo.ESBHRZPHRZPInquiryApplicantInfoSrv#process(applicantInfo.ESBHRZPHRZPInquiryApplicantInfoSrvRequest  payload )*
     */
    public ESBHRZPHRZPInquiryApplicantInfoSrvResponse process(ESBHRZPHRZPInquiryApplicantInfoSrvRequest payload) { 
        LOG.info("Executing operation process");
        System.out.println(payload);
        String personCode = payload.getAPPLICATIONCODE(); // 应聘申请单号
        ESBHRZPHRZPInquiryApplicantInfoSrvResponse _return = new ESBHRZPHRZPInquiryApplicantInfoSrvResponse();
        ESBHRZPHRZPInquiryApplicantInfoSrvOutputCollection outputCollection = new ESBHRZPHRZPInquiryApplicantInfoSrvOutputCollection();
        try {
            
            // 基本信息
            InterviewInfo basicInfo = interviewInfoService.getByPersonCode(personCode);
            
            if(null != basicInfo) {
              
              List<ESBHRZPHRZPInquiryApplicantInfoSrvOutputItem> outputItems = new ArrayList<ESBHRZPHRZPInquiryApplicantInfoSrvOutputItem>();
              outputCollection.esbhrzphrzpInquiryApplicantInfoSrvOutputItem = outputItems;
              ESBHRZPHRZPInquiryApplicantInfoSrvOutputItem outputItem = new ESBHRZPHRZPInquiryApplicantInfoSrvOutputItem();
              
              // 教育经历
              List<EducationExperience> edus = educationExperienceService.queryByResumeId(personCode);
              
              // 工作经历
              List<WorkExperience> works = workExperienceService.queryByResumeId(personCode);
              
              outputItem.setBIRTHDAY(basicInfo.getBirthdate());
              outputItem.setEMAIL(basicInfo.getEmail());
              outputItem.setGENDER(basicInfo.getSexName());
              outputItem.setNAME(basicInfo.getCnname());
              outputItem.setTEL(basicInfo.getPhonenumber());
              outputItem.setEDUCATIONCollection(parseEducation(edus));
              outputItem.setWORKEXPERIENCECollection(parseWorkExperience(works));
              
              _return.setERRORCODE("0");
              _return.setSERVICEFLAG("TRUE");
              _return.setSERVICEMESSAGE("查询成功");
              outputItems.add(outputItem);
            }
            else {
              _return.setERRORCODE("1");
              _return.setSERVICEFLAG("FALSE");
              _return.setSERVICEMESSAGE("应聘者不存在");
            }
            
            
        } catch (java.lang.Exception ex) {
          LOG.error(ex);
          _return.setERRORCODE("1");
          _return.setSERVICEFLAG("FALSE");
          _return.setSERVICEMESSAGE(ex.getMessage());
        }
        
        _return.setESBHRZPHRZPInquiryApplicantInfoSrvOutputCollection(outputCollection);
        return _return;
    }
    
    public EDUCATIONCollection parseEducation(List<EducationExperience> edus) {
      EDUCATIONCollection educationCollection = new EDUCATIONCollection();
      List<EDUCATIONItem> educationItems = new ArrayList<EDUCATIONItem>();
      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");  
      for(EducationExperience e : edus) {
        EDUCATIONItem item = new EDUCATIONItem();
        item.setMAJOR(e.getMajor());
        item.setDEGREE(DatadictGroup.getTypeNameByTypeId(e.getEducation()));
        item.setSCHOOL(e.getSchoolName());
        item.setEDUCATIONTYPE(DatadictGroup.getTypeNameByTypeId(e.getEduType()));
        item.setENDDATE((null == e.getEduEndDate() ? "" : sdf.format(e.getEduEndDate())));
        item.setSTARTDATE((null == e.getEduStartDate() ? "" : sdf.format(e.getEduStartDate())));
        educationItems.add(item);
      }
      educationCollection.educationItem = educationItems;
      return educationCollection;
    }
    
    public WORKEXPERIENCECollection parseWorkExperience(List<WorkExperience> works) {
      WORKEXPERIENCECollection workExperienceCollection = new WORKEXPERIENCECollection();
      List<WORKEXPERIENCEItem> workexperienceItems = new ArrayList<WORKEXPERIENCEItem>();
      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd"); 
      for(WorkExperience w : works) {
        WORKEXPERIENCEItem item = new WORKEXPERIENCEItem();
        item.setCOMPANY(w.getCompanyName());
        item.setPOSITION(w.getPositionName());
        item.setENDDATE((null == w.getJobEndDate() ? "" : sdf.format(w.getJobEndDate())));
        item.setSTARTDATE((null == w.getJobStartDate() ? "" : sdf.format(w.getJobStartDate())));
        workexperienceItems.add(item);
      }
      workExperienceCollection.workexperienceItem = workexperienceItems;
      return workExperienceCollection;
    }

}
